- name: install cfssl
  get_url: 
    url: "{{item.url}}"
    dest: "{{item.dest}}" 
    mode: "u+x"
  with_items:
    - {url: '{{cfssl}}', dest: '/usr/local/bin/cfssl'}
    - {url: '{{cfssljson}}', dest: '/usr/local/bin/cfssljson'}
    - {url: '{{cfssl_certinfo}}', dest: '/usr/local/bin/cfssl-certinfo'}

- name: creates common directory
  file: path="{{item}}" state=directory
  with_items:
    - /root/ssl
    - /root/software
    - /etc/kubernetes/ssl

- name: copy ssl configuration file 
  copy:
    src: "{{item}}"
    dest: /root/ssl
  with_items:
    - "admin-csr.json"
    - "ca-config.json"
    - "ca-csr.json"
    - "kube-proxy-csr.json"

- name: generate ssl configuration file 
  template:
    src: "{{item}}"
    dest: /root/ssl/kubernetes-csr.json
  with_items:
    - "kubernetes-csr.json.j2"

- name: create certicicate
  shell: |
    cd /root/ssl
    cfssl gencert -initca ca-csr.json | cfssljson -bare ca
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy
    cp *.pem /etc/kubernetes/ssl
  args:
    executable: /bin/bash

- name: copy local ssh private key
  copy:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    mode: 0600
  with_items:
  - {src: "~/.ssh/k8s_rsa", dest: "~/.ssh/id_rsa"}
  - {src: "~/.ssh/k8s_rsa.pub", dest: "~/.ssh/id_rsa.pub"}

- name: get k8s software
  get_url: 
    url: "{{item.url}}"
    dest: "{{item.dest}}" 
  with_items:
    - {url: '{{kubernetes_client}}', dest: '/root/software/'}
    - {url: '{{kubernetes_server}}', dest: '/root/software/'}

- name: create kubectl kubelet kube-proxy kubeconfig
  shell: |
    cd /root/software
    tar -xzvf kubernetes-client-linux-amd64.tar.gz
    cp kubernetes/client/bin/kube* /usr/bin/
    chmod a+x /usr/bin/kube*

    cd /etc/kubernetes
    export BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d ' ')
    echo ${BOOTSTRAP_TOKEN},kubelet-bootstrap,10001,"system:kubelet-bootstrap" > token.csv

    export KUBE_APISERVER="https://{{ansible_default_ipv4.address}}:6443"
    kubectl config set-cluster kubernetes \
        --certificate-authority=/etc/kubernetes/ssl/ca.pem \
        --embed-certs=true \
        --server=${KUBE_APISERVER}
    kubectl config set-credentials admin \
        --client-certificate=/etc/kubernetes/ssl/admin.pem \
        --embed-certs=true \
        --client-key=/etc/kubernetes/ssl/admin-key.pem
    kubectl config set-context kubernetes \
        --cluster=kubernetes \
        --user=admin
    kubectl config use-context kubernetes

    kubectl config set-cluster kubernetes \
      --certificate-authority=/etc/kubernetes/ssl/ca.pem \
      --embed-certs=true \
      --server=${KUBE_APISERVER} \
      --kubeconfig=bootstrap.kubeconfig
    kubectl config set-credentials kubelet-bootstrap \
      --token=${BOOTSTRAP_TOKEN} \
      --kubeconfig=bootstrap.kubeconfig
    kubectl config set-context default \
      --cluster=kubernetes \
      --user=kubelet-bootstrap \
      --kubeconfig=bootstrap.kubeconfig
    kubectl config use-context default --kubeconfig=bootstrap.kubeconfig

    kubectl config set-cluster kubernetes \
      --certificate-authority=/etc/kubernetes/ssl/ca.pem \
      --embed-certs=true \
      --server=${KUBE_APISERVER} \
      --kubeconfig=kube-proxy.kubeconfig
    kubectl config set-credentials kube-proxy \
      --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem \
      --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem \
      --embed-certs=true \
      --kubeconfig=kube-proxy.kubeconfig
    kubectl config set-context default \
      --cluster=kubernetes \
      --user=kube-proxy \
      --kubeconfig=kube-proxy.kubeconfig
    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

  args:
    executable: /bin/bash

